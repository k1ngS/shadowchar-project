// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  characters Character[]

  refreshToken RefreshToken?
}

model RefreshToken {
  id          String   @id @default(uuid())
  hashedToken String   @unique
  userId      Int      @unique // Um usuário só pode ter um refresh token ativo por vez
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Character {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String
  ancestry String

  // Attributes
  strength  Int @default(10)
  agility   Int @default(10)
  intellect Int @default(10)
  will      Int @default(10)

  owner   User @relation(fields: [ownerId], references: [id])
  ownerId Int

  talents Talent[]
}

model Talent {
  id          Int     @id @default(autoincrement())
  name        String
  description String?

  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  characterId Int
}
